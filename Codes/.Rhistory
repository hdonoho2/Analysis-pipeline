qqunif.plot<-function(pvalues,
should.thin=T, thin.obs.places=2, thin.exp.places=2,
xlab=expression(paste("Expected (",-log[10], " p-value)")),
ylab=expression(paste("Observed (",-log[10], " p-value)")),
draw.conf=TRUE, conf.points=1000, conf.col="lightgray", conf.alpha=.05,
already.transformed=FALSE, pch=20, aspect="iso", prepanel=prepanel.qqunif,
par.settings=list(superpose.symbol=list(pch=pch)), ...) {
#error checking
if (length(pvalues)==0) stop("pvalue vector is empty, can't draw plot")
if(!(class(pvalues)=="numeric" ||
(class(pvalues)=="list" && all(sapply(pvalues, class)=="numeric"))))
stop("pvalue vector is not numeric, can't draw plot")
if (any(is.na(unlist(pvalues)))) stop("pvalue vector contains NA values, can't draw plot")
if (already.transformed==FALSE) {
if (any(unlist(pvalues)==0)) stop("pvalue vector contains zeros, can't draw plot")
} else {
if (any(unlist(pvalues)<0)) stop("-log10 pvalue vector contains negative values, can't draw plot")
}
grp<-NULL
n<-1
exp.x<-c()
if(is.list(pvalues)) {
nn<-sapply(pvalues, length)
rs<-cumsum(nn)
re<-rs-nn+1
n<-min(nn)
if (!is.null(names(pvalues))) {
grp=factor(rep(names(pvalues), nn), levels=names(pvalues))
names(pvalues)<-NULL
} else {
grp=factor(rep(1:length(pvalues), nn))
}
pvo<-pvalues
pvalues<-numeric(sum(nn))
exp.x<-numeric(sum(nn))
for(i in 1:length(pvo)) {
if (!already.transformed) {
pvalues[rs[i]:re[i]] <- -log10(pvo[[i]])
exp.x[rs[i]:re[i]] <- -log10((rank(pvo[[i]], ties.method="first")-.5)/nn[i])
} else {
pvalues[rs[i]:re[i]] <- pvo[[i]]
exp.x[rs[i]:re[i]] <- -log10((nn[i]+1-rank(pvo[[i]], ties.method="first")-.5)/(nn[i]+1))
}
}
} else {
n <- length(pvalues)+1
if (!already.transformed) {
exp.x <- -log10((rank(pvalues, ties.method="first")-.5)/n)
pvalues <- -log10(pvalues)
} else {
exp.x <- -log10((n-rank(pvalues, ties.method="first")-.5)/n)
}
}
#this is a helper function to draw the confidence interval
panel.qqconf<-function(n, conf.points=1000, conf.col="gray", conf.alpha=.05, ...) {
require(grid)
conf.points = min(conf.points, n-1);
mpts<-matrix(nrow=conf.points*2, ncol=2)
for(i in seq(from=1, to=conf.points)) {
mpts[i,1]<- -log10((i-.5)/n)
mpts[i,2]<- -log10(qbeta(1-conf.alpha/2, i, n-i))
mpts[conf.points*2+1-i,1]<- -log10((i-.5)/n)
mpts[conf.points*2+1-i,2]<- -log10(qbeta(conf.alpha/2, i, n-i))
}
grid.polygon(x=mpts[,1],y=mpts[,2], gp=gpar(fill=conf.col, lty=0), default.units="native")
}
#reduce number of points to plot
if (should.thin==T) {
if (!is.null(grp)) {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places),
grp=grp))
grp = thin$grp
} else {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places)))
}
pvalues <- thin$pvalues
exp.x <- thin$exp.x
}
gc()
prepanel.qqunif= function(x,y,...) {
A = list()
A$xlim = range(x, y)*1.02
A$xlim[1]=0
A$ylim = A$xlim
return(A)
}
#draw the plot
xyplot(pvalues~exp.x, groups=grp, xlab=xlab, ylab=ylab, aspect=aspect,
prepanel=prepanel, scales=list(axs="i"), pch=pch,
panel = function(x, y, ...) {
if (draw.conf) {
panel.qqconf(n, conf.points=conf.points,
conf.col=conf.col, conf.alpha=conf.alpha)
};
panel.xyplot(x,y, ...);
panel.abline(0,1);
}, par.settings=par.settings, ...
)
}
qqunif.plot(x$seed) #these are the raw p-values, not log-transformed
library(lattice)
qqunif.plot<-function(pvalues,
should.thin=T, thin.obs.places=2, thin.exp.places=2,
xlab=expression(paste("Expected (",-log[10], " p-value)")),
ylab=expression(paste("Observed (",-log[10], " p-value)")),
draw.conf=TRUE, conf.points=1000, conf.col="lightgray", conf.alpha=.05,
already.transformed=FALSE, pch=20, aspect="iso", prepanel=prepanel.qqunif,
par.settings=list(superpose.symbol=list(pch=pch)), ...) {
#error checking
if (length(pvalues)==0) stop("pvalue vector is empty, can't draw plot")
if(!(class(pvalues)=="numeric" ||
(class(pvalues)=="list" && all(sapply(pvalues, class)=="numeric"))))
stop("pvalue vector is not numeric, can't draw plot")
if (any(is.na(unlist(pvalues)))) stop("pvalue vector contains NA values, can't draw plot")
if (already.transformed==FALSE) {
if (any(unlist(pvalues)==0)) stop("pvalue vector contains zeros, can't draw plot")
} else {
if (any(unlist(pvalues)<0)) stop("-log10 pvalue vector contains negative values, can't draw plot")
}
grp<-NULL
n<-1
exp.x<-c()
if(is.list(pvalues)) {
nn<-sapply(pvalues, length)
rs<-cumsum(nn)
re<-rs-nn+1
n<-min(nn)
if (!is.null(names(pvalues))) {
grp=factor(rep(names(pvalues), nn), levels=names(pvalues))
names(pvalues)<-NULL
} else {
grp=factor(rep(1:length(pvalues), nn))
}
pvo<-pvalues
pvalues<-numeric(sum(nn))
exp.x<-numeric(sum(nn))
for(i in 1:length(pvo)) {
if (!already.transformed) {
pvalues[rs[i]:re[i]] <- -log10(pvo[[i]])
exp.x[rs[i]:re[i]] <- -log10((rank(pvo[[i]], ties.method="first")-.5)/nn[i])
} else {
pvalues[rs[i]:re[i]] <- pvo[[i]]
exp.x[rs[i]:re[i]] <- -log10((nn[i]+1-rank(pvo[[i]], ties.method="first")-.5)/(nn[i]+1))
}
}
} else {
n <- length(pvalues)+1
if (!already.transformed) {
exp.x <- -log10((rank(pvalues, ties.method="first")-.5)/n)
pvalues <- -log10(pvalues)
} else {
exp.x <- -log10((n-rank(pvalues, ties.method="first")-.5)/n)
}
}
#this is a helper function to draw the confidence interval
panel.qqconf<-function(n, conf.points=1000, conf.col="gray", conf.alpha=.05, ...) {
require(grid)
conf.points = min(conf.points, n-1);
mpts<-matrix(nrow=conf.points*2, ncol=2)
for(i in seq(from=1, to=conf.points)) {
mpts[i,1]<- -log10((i-.5)/n)
mpts[i,2]<- -log10(qbeta(1-conf.alpha/2, i, n-i))
mpts[conf.points*2+1-i,1]<- -log10((i-.5)/n)
mpts[conf.points*2+1-i,2]<- -log10(qbeta(conf.alpha/2, i, n-i))
}
grid.polygon(x=mpts[,1],y=mpts[,2], gp=gpar(fill=conf.col, lty=0), default.units="native")
}
#reduce number of points to plot
if (should.thin==T) {
if (!is.null(grp)) {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places),
grp=grp))
grp = thin$grp
} else {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places)))
}
pvalues <- thin$pvalues
exp.x <- thin$exp.x
}
gc()
prepanel.qqunif= function(x,y,...) {
A = list()
A$xlim = range(x, y)*1.02
A$xlim[1]=0
A$ylim = A$xlim
return(A)
}
#draw the plot
xyplot(pvalues~exp.x, groups=grp, xlab=xlab, ylab=ylab, aspect=aspect,
prepanel=prepanel, scales=list(axs="i"), pch=pch,
panel = function(x, y, ...) {
if (draw.conf) {
panel.qqconf(n, conf.points=conf.points,
conf.col=conf.col, conf.alpha=conf.alpha)
};
panel.xyplot(x,y, ...);
panel.abline(0,1);
}, par.settings=par.settings, ...
)
}
qqunif.plot(x$seed) #these are the raw p-values, not log-transformed
# Run the GWAS analysis
gwas<-GWAS(pheno=rice.pheno[,c(1,2)],geno=geno.rice, n.PC=3, fixed=NULL, min.MAF = 0.05, P3D = TRUE, plot =FALSE)
# Visulaize the gwas dataframe(gwas)
# Data table
# Save the results in the directory
# Let us save Geno file in .rds format
saveRDS(gwas, file = "~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/GWAS_output_rrBLUP/gwas.rds")
x<-data.frame(seed=10^-gwas$Seed.length)
qqunif.plot(x$seed) #these are the raw p-values, not log-transformed
qqnorm(x$seed, pch = 1, frame = FALSE)
qq(gwas$Seed.length)
library(CMplot)
qplot(sample = Seed.length, data = gwas)
# Visualize top significant SNPss
gwas%>% filter(Seed.length>4.8)
View(gwas)
# Visualize top significant SNPss
gwas[gwas$Seed.length>4.8,]
# Visualize top significant SNPss
order(gwas[gwas$Seed.length>5,])
# Visualize top significant SNPss
sort(gwas[gwas$Seed.length>5,])
# Visualize top significant SNPss
gwas[gwas$Seed.length>5,]
install.packages("devtools")
devtools::install_github("jiabowang/GAPIT3",force=TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
devtools::install_github("jiabowang/GAPIT3",force=TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
packages = c("gdata", "LDheatmap", "genetics", "ape","EMMREML")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
packages = c("MASS", "gdata", "LDheatmap", "genetics", "ape","EMMREML")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
install.packages(x, dependencies = TRUE)
packages = c("MASS", "gdata", "LDheatmap", "genetics", "ape","EMMREML")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
# Now load all these R packages along with GAPIT source functions
library(multtest)
library(compiler)
source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/GAPIT/emma.txt")
data (cars)
rm(list=ls())
# First let us upload the filtered marker data file in gds format.
marker.data.filtered<-readRDS(file = "~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/Geno.filtered.rds")
dim(marker.data.filtered) # 408 genotypes in rows and 33088 markers in columns
# check first 6 rows and columns
marker.data.filtered[1:6, 1:6]
# Here in this file,  markers are in columns and genotypes in rows. Also it is in 0, 1 and 2 format.
# Read the filtered map information file and add to marker  data file.
map.info<-readRDS(file = "~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/MAP.filtered.rds")
dim(map.info)
# Now let us prepare the rrBLUP format GWAS file
# Here we will add marker names, position and chromosome no. from map file, then marker.data file which is transposed and also subtracted -1 (2-1=1,0-1=-1,1-1=0)
geno.rice<- data.frame(marker = map.info[, 2], chrom = map.info[, 1], pos = map.info[,
4], t(marker.data.filtered - 1), check.names = FALSE)  # W = \in{-1, 0, 1}
#  View as data table few rows and columns
# Now let us upload the pheno file
rice.pheno<-readRDS(file = "~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/rice.pheno.filtered.rds")
dim(marker.data.filtered)
library(gdata)
library(dplyr)
library(multtest)
library(gplots)
library(LDheatmap)
library(genetics)
library(data.table)
library(ape)
library(EMMREML)
library(compiler) #this library is already installed in R
library("scatterplot3d")
source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/GAPIT/emma.txt")
setwd("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/GWAS_output_GAPIT")
library(data.table)
geno<-data.frame(marker.data.filtered)
geno<-setDT(geno, keep.rownames = "NSFTVID")
table(geno$NSFTVID==rice.pheno$NSFTVID)
rice.pheno<-rice.pheno[,c(1,3)]
myGAPIT <- GAPIT(
Y=rice.pheno,
GD=geno,
GM=map.info,
PCA.total=3,
model="MLM"
)
setwd("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/GWAS_output_GAPIT")
library(data.table)
geno<-data.frame(marker.data.filtered)
geno<-setDT(geno, keep.rownames = "NSFTVID")
table(geno$NSFTVID==rice.pheno$NSFTVID)
rice.pheno<-rice.pheno[,c(1,3)]
myGAPIT <- GAPIT(
Y=rice.pheno,
GD=geno,
GM=map.info,
PCA.total=3,
SNP.P3D = TRUE,
model="MLM"
)
# Read the phenotypic data file
pheno<- read.table("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/rice.pheno.filtered.txt", head = TRUE)
# Read the genotypic/marker file
geno<- read.table("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/Geno.filtered.txt", head = TRUE)
# Read the map info file
map.info<- read.table("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/MAP.txt", head = TRUE)
# Let us cross check wether genotype names are matching
table(pheno$NSFTVID==geno$NSFTVID) # TRUE, means matching
#Set working directory
setwd("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/GWAS_output_GAPIT")
#pheno<-pheno[,c(1,3)]
# Now run the analysis
gwas.output<- GAPIT(
Y=pheno, # phenotypic data file, run only for traits in column 2. If not mentioned it will run gwas for all traits. Column 1  contains genotype names.
GD=geno, # genotypic/amrker data file
K=NULL,
GM=map.info, # map file
PCA.total=6, # PC components equal (Q+K) model
SNP.P3D=TRUE, # variance calculated single time
model="MLM" # Model is Mixed Linear model as used in rrBLUP
)
View(pheno)
# MLM model incorporates Kinship matrix automatically.
# Kinship matrix (Z) can aslo be incorporated manually and covariates.
library(NAM)
data(met)
View(Gen)
View(Obs)
View(Gen)
source("http://zzlab.net/GAPIT/gapit_functions.txt")
# Now load all these R packages along with GAPIT source functions
library(compiler)
source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/GAPIT/emma.txt")
# Read the phenotypic data file
pheno<- read.table("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/rice.pheno.filtered.txt", head = TRUE)
# Read the genotypic/marker file
geno<- read.table("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/Geno.filtered.txt", head = TRUE)
# Read the map info file
map.info<- read.table("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/filtered_datasets/MAP.txt", head = TRUE)
# Let us cross check wether genotype names are matching
table(pheno$NSFTVID==geno$NSFTVID) # TRUE, means matching
#Set working directory
setwd("~/Dropbox/R_PlantBreeding/GWAS_TUTORIAL/outputfiles/GWAS_output_GAPIT")
#pheno<-pheno[,c(1,3)]
# Now run the analysis
gwas.output<- GAPIT(
Y=pheno, # phenotypic data file, run only for traits in column 2. If not mentioned it will run gwas for all traits. Column 1  contains genotype names.
GD=geno, # genotypic/amrker data file
K=NULL,
GM=map.info, # map file
PCA.total=6, # PC components equal (Q+K) model
SNP.P3D=TRUE, # variance calculated single time
model="MLM" # Model is Mixed Linear model as used in rrBLUP
)
# MLM model incorporates Kinship matrix automatically.
# Kinship matrix (Z) can aslo be incorporated manually and covariates.
rr(blup)
library(rr(blup))
library(rrblup)
#random population of 200 lines with 1000 markers
M <- matrix(rep(0,200*1000),200,1000)
library(rrBLUP)
#random population of 200 lines with 1000 markers
M <- matrix(rep(0,200*1000),200,1000)
for (i in 1:200) {
M[i,] <- ifelse(runif(1000)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(1000)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
ans <- mixed.solve(y,Z=M)  #By default K = I
ans
# install.packages("devtools")
devtools::install_github("nstrayer/datadrivencv")
install.packages("ICON")
# install.packages("devtools")
devtools::install_github("nstrayer/datadrivencv")
require("knitr")
opts_knit$set(root.dir = "~/Dropbox/Big_HDNT_2019/R_scripts")
library(easypackages)
libraries( "rrBLUP", "qqman", "dplyr", "reshape2", "readxl", "ggpubr","stringr", "ggplot2", "tidyverse", "lme4", "data.table", "readr", "DT")
list.files("~/Dropbox/Big_HDNT_2019/Data")
# Combined (avergaed over replications) for fertility
sgw.con<-read_excel("~/Dropbox/Big_HDNT_2019/Data/Big HDNT_2019_harvest_SGW_combined_replicates_PP_v2.2.xlsx", sheet = 1)
View(sgw.con)
#Add the column and cbind with above data set
sgw.con<-cbind(data.frame(Treatment= c(rep("Control",nrow(sgw.con)))), sgw.con)
View(sgw.con)
colnames(sgw.con)[4]<-"sgw"
# Rename NSFTV_id column
sgw.con$NSFTV_Id<-paste0("NSFTV_", sgw.con$NSFTV_Id)
# Combined (avergaed over replications) for sgw
sgw.str<-read_excel("~/Dropbox/Big_HDNT_2019/Data/Big HDNT_2019_harvest_SGW_combined_replicates_PP_v2.1.xlsx", sheet = 2)
# Combined (avergaed over replications) for sgw
sgw.str<-read_excel("~/Dropbox/Big_HDNT_2019/Data/Big HDNT_2019_harvest_SGW_combined_replicates_PP_v2.2.xlsx", sheet = 2)
#Add the column and cbind with above data set
sgw.str<-cbind(data.frame(Treatment= c(rep("Stress",nrow(sgw.str)))), sgw.str)
# Rename the columns
colnames(sgw.str)[4]<-"sgw"
View(sgw.str)
sgw.str$NSFTV_Id<-paste0("NSFTV_", sgw.str$NSFTV_Id)
# Now rbind the control and stress
sgw.all<-rbind(sgw.con, sgw.str)
View(sgw.all)
ggplot(sgw.all, aes(x=Treatment, y=sgw, fill=Treatment)) +
geom_boxplot()+
theme_classic()+
labs(title="",x="Treatemnt", y = "sgw (%)")+
theme (plot.title = element_text(color="black", size=14,hjust=0.5),
axis.title.x = element_text(color="black", size=12),
axis.title.y = element_text(color="black", size=12)) +
theme(axis.text= element_text(color = "black", size = 10))+
theme(legend.position="none")+
stat_compare_means(method = "anova")
par(mfrow=c(1,2))
# For grain yield
trt<-unique(sgw.all$Treatment)
for(i in 1:length(trt)){
level_trt <-  sgw.all[which(sgw.all$Treatment==trt[i]),]
hist(level_trt$sgw, col = "pink", xlab="sgw (%)",
main=paste(trt[i]))
}
# First arrange data file and traits in columns
table(sgw.con$NSFTV_Id==sgw.str$NSFTV_Id)
geno_700k<-readRDS(file="~/Dropbox/Big_HDNT_2019/Data/geno_final_700k.rds")
map_700k<-readRDS(file="~/Dropbox/Big_HDNT_2019/Data/mapinfo_final_700k.rds")
map_700k<-map_700k[, c(2, 1, 4)]
colnames(map_700k)<-c("Name", "Chromosome", "Position")
colnames(geno_700k)<-map_700k$Name
dim(geno.sgw.con)
# MATCH NSFTV_IDs IN GENO AND PHENO FILE
# IN CONTROL
geno.sgw.con<- geno_700k[match(sgw.con$NSFTV_Id, rownames(geno_700k)),]
dim(geno.sgw.con)
na.index <- is.na(rownames(geno.sgw.con))
geno.sgw.con<- geno.sgw.con[!na.index,]
dim(geno.sgw.con)
sgw.con.final<- sgw.con[match(rownames(geno.sgw.con),sgw.con$NSFTV_Id),]
table(row.names(geno.sgw.con)==sgw.con.final$NSFTV_Id)
geno.sgw.str<- geno_700k[match(sgw.str$NSFTV_Id, rownames(geno_700k)),]
dim(geno.sgw.str)
na.index <- is.na(rownames(geno.sgw.str))
geno.sgw.str<- geno.sgw.str[!na.index,]
dim(geno.sgw.str)
sgw.str.final<- sgw.str[match(rownames(geno.sgw.str),sgw.str$NSFTV_Id),]
table(row.names(geno.sgw.str)==sgw.str.final$NSFTV_Id)
# Now prepare GWAS file for rrBLUP analysis
geno_rrblup.sgw.con<- data.frame(marker=map_700k[,1], chrom=map_700k[,2],
pos=map_700k[,3], t(geno.sgw.con-1), check.names = FALSE)
geno_rrblup.sgw.str<- data.frame(marker=map_700k[,1], chrom=map_700k[,2],
pos=map_700k[,3], t(geno.sgw.str-1), check.names = FALSE)
View(sgw.con.final)
# GWAS IN CONTROL
pheno.sgw.con<-data.frame(sgw.con.final[, c(3,4)])
GWAS_sgw.con<-GWAS(pheno.sgw.con,geno_rrblup.sgw.con, P3D = TRUE, plot = FALSE)
View(GWAS_sgw.con)
# GWAS IN STRESS
pheno.sgw.str<-data.frame(sgw.str.final[, c(3,4)])
GWAS_sgw.str<-GWAS(pheno.sgw.str,geno_rrblup.sgw.str, P3D = TRUE, plot = FALSE)
View(GWAS_sgw.str)
# sAVE gwas files
write.csv(GWAS_sgw.con, file="~/Dropbox/Big_HDNT_2019/Outputs/genotype/GWAS_sgw.con.csv", row.names = FALSE)
write.csv(GWAS_sgw.str, file="~/Dropbox/Big_HDNT_2019/Outputs/genotype/GWAS_sgw.str.csv", row.names = FALSE)
# Under control
manhattan(GWAS_sgw.con, chr = "chrom", col = c("black","gray"),  bp="pos", p="sgw", snp="marker",
logp=FALSE, genomewideline= FALSE, suggestiveline = -log10(0.5e-05), cex.axis = 0.8, mgp=c(2,1,0), main="sgw Under Control")
# Under stress
manhattan(GWAS_sgw.str, chr = "chrom", col = c("black","gray"),  bp="pos", p="sgw", snp="marker",
logp=FALSE, genomewideline= FALSE, suggestiveline = -log10(0.5e-05), cex.axis = 0.8, mgp=c(2,1,0), main="sgw Under Stress")
setwd("~/Documents/GitHub/Analysis-pipeline/Codes")
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/Analysis-pipeline/Codes")
library(easypackages)
libraries( "rrBLUP", "qqman", "dplyr", "reshape2", "readxl", "ggpubr","stringr", "ggplot2", "tidyverse", "lme4", "data.table", "readr", "DT")
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/Analysis-pipeline/Codes")
library(easypackages)
libraries("dplyr", "reshape2", "readxl", "ggpubr","stringr", "ggplot2", "tidyverse",
"lme4", "data.table", "readr","plotly", "DT", "pheatmap","asreml", "VennDiagram",
"patchwork", "heatmaply", "ggcorrplot", "RColorBrewer", "hrbrthemes", "tm", "proustr")
install.packages("plotly")
library(easypackages)
libraries("dplyr", "reshape2", "readxl", "ggpubr","stringr", "ggplot2", "tidyverse",
"lme4", "data.table", "readr","plotly", "DT", "pheatmap","asreml", "VennDiagram",
"patchwork", "heatmaply", "ggcorrplot", "RColorBrewer", "hrbrthemes", "tm", "proustr")
