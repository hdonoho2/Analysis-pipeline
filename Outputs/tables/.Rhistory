Min.=min(Height, na.rm=TRUE),
Max.=max(Height, na.rm=TRUE),
CV=sd(Height, na.rm=TRUE)/mean(Height, na.rm=TRUE)*100,
St.err= sd(Height, na.rm=TRUE)/sqrt(length(Height))
))
summary.height<-cbind(data.frame(Trait=c(rep("Height", nrow(summary.height)))),summary.height )
# Now combine the all data summeries and view as table
summary.data<-rbind(summary.gykgpha, summary.flowering, summary.height)
summary.data<-data.frame(lapply(summary.data, function(y) if(is.numeric(y)) round(y, 2) else y))
# Add options to print and export
print_table(summary.data, rownames = FALSE,caption = htmltools::tags$caption("Data summary including mean, median, standard deviation (SD), coefficient of variation (CV), and standard error (St.err) for yield, days to flowering and plant Height.", style="color:black; font-size:130%"))
# For Drought data
demo.data.dr<- subset(demo.data, Environment=="Stress.trial",select =c("Block", "Column", "GYKGPHA") )
demo.data.dr<-data.frame(demo.data.dr%>% group_by(Block)%>% arrange(Block) %>%arrange(Column))
demo.data.dr<-droplevels.data.frame(demo.data.dr)
demo.data.dr<-reshape(demo.data.dr, idvar = "Block", timevar = "Column", direction = "wide")
row.names(demo.data.dr)<-paste0("Block",  demo.data.dr$Block)
demo.data.dr<-data.matrix(demo.data.dr[,-1])
colnames(demo.data.dr) <- gsub(x = colnames(demo.data.dr), pattern = "GYKGPHA.", replacement = "")
plot.gy.sa<-heatmaply(demo.data.dr, main = "Grain yield under stress (drought) trial",
xlab = "Columns",
ylab = "Rows",
Rowv=FALSE,
Colv = FALSE, cexRow = 0.8, cexCol = 0.6, na.value="white")
plot.gy.sa
# For Non-stress Data
demo.data.ns<- subset(demo.data, Environment=="Non.stress.trial",select =c("Block", "Column", "GYKGPHA") )
demo.data.ns<-data.frame(demo.data.ns%>% group_by(Block)%>% arrange(Block) %>%arrange(Column))
demo.data.ns<-droplevels.data.frame(demo.data.ns)
demo.data.ns<-reshape(demo.data.ns, idvar = "Block", timevar = "Column", direction = "wide")
row.names(demo.data.ns)<-paste0("Block",  demo.data.ns$Block)
demo.data.ns<-data.matrix(demo.data.ns[,-1])
colnames(demo.data.ns) <- gsub(x = colnames(demo.data.ns), pattern = "GYKGPHA.", replacement = "")
plot.gy.ns<-heatmaply(demo.data.ns, main = "Grain yield under non-stress trial",
xlab = "Columns",
ylab = "Rows",
Rowv=FALSE,
Colv = FALSE, cexRow = 0.8, cexCol = 0.6, na.value="white")
plot.gy.ns
# First let us visualize the data using boxplots
myboxplot<- function(dataframe,x,y){
aaa <- enquo(x)
bbb <- enquo(y)
dfname <- enquo(dataframe)
dataframe %>%
filter(!is.na(!! aaa), !is.na(!! bbb))  %>%
#group_by(!! aaa,!! bbb) %>%
#count() %>%
ggplot(aes_(fill=aaa, x=aaa, y=bbb))+
theme_classic()+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +# fill by timepoint to give different color
#scale_fill_manual(values = c("", ""))+
#scale_color_manual(values = c("", ""))
theme (plot.title = element_text(color="black", size=12,hjust=0.5, face = "bold"), # add and modify the title to plot
axis.title.x = element_text(color="black", size=12, face = "bold"), # add and modify title to x axis
axis.title.y = element_text(color="black", size=12, face="bold")) + # add and modify title to y axis
#scale_y_continuous(limits=c(0,15000), breaks=seq(0,15000,1000), expand = c(0, 0))+
theme(axis.text= element_text(color = "black", size = 10))+ # modify the axis text
theme(legend.title = element_text(colour="black", size=16), legend.position = "none",
legend.text = element_text(colour="black", size=14))+ # add and modify the legends
guides(fill=guide_legend(title="Environments"))+
stat_summary(fun.y=mean, geom="line", aes(group=1))  +
stat_summary(fun=mean, geom="point")
}
# Now draw the box plot for yield
p1<-boxplot.yield<-myboxplot(demo.data,x=Environment,y=GYKGPHA)+
labs(title="",x="Environments", y = "Grain Yield")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 10000)
#p1<-ggplotly(boxplot.yield)
# Now draw the box plot for flowering
p2<-boxplot.flowering<-myboxplot(demo.data,x=Environment,y=Days.to.flowering)+
labs(title="",x="Environments", y = "Days to flowering")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 130)
#p2<-ggplotly(boxplot.flowering)
# Now draw the box plot height
p3<-boxplot.height<-myboxplot(demo.data,x=Environment,y=Height)+
labs(title="",x="Environments", y = "Plant Height (cm)")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 167)
#p3<-ggplotly(boxplot.height)
p1+p2+p3
par(mfrow=c(1,2))
# For grain yield
envi<-unique(demo.data$Environment)
for(i in 1:length(envi)){
level_envi <- demo.data[which(demo.data$Environment==envi[i]),]
hist(level_envi$GYKGPHA, col = "pink", xlab="Grain yield",
main=paste(envi[i]))
}
# For Flowering date
envi<-unique(demo.data$Environment)
for(i in 1:length(envi)){
level_envi <- demo.data[which(demo.data$Environment==envi[i]),]
hist(level_envi$Days.to.flowering, col = "pink", xlab="Days to flowering",
main=paste(envi[i]))
}
# For Plant height
envi<-unique(demo.data$Environment)
for(i in 1:length(envi)){
level_envi <- demo.data[which(demo.data$Environment==envi[i]),]
hist(level_envi$Height, col = "pink", xlab="Plant Height (cm)",
main=paste(envi[i]))
}
## QQ plots to check normality assumption
# For the grain Yield
par(mfrow=c(1,2))
envi<-unique(demo.data$Environment)
for(i in 1:length(envi)){
level_envi <- demo.data[which(demo.data$Envi==envi[i]),]
qqnorm(level_envi$GYKGPHA, pch = 1, frame = TRUE,  main=paste(envi[i],".Yield"))
qqline(level_envi$GYKGPHA, col = "steelblue", lwd = 2)
}
# For the days to flowering
par(mfrow=c(1,2))
envi<-unique(demo.data$Environment)
for(i in 1:length(envi)){
level_envi <- demo.data[which(demo.data$Envi==envi[i]),]
qqnorm(level_envi$Days.to.flowering, pch = 1, frame = TRUE,  main=paste(envi[i],".Flowering"))
qqline(level_envi$Days.to.flowering, col = "steelblue", lwd = 2)
}
# For the days to plant height
par(mfrow=c(1,2))
envi<-unique(demo.data$Environment)
for(i in 1:length(envi)){
level_envi <- demo.data[which(demo.data$Envi==envi[i]),]
qqnorm(level_envi$Height, pch = 1, frame = TRUE,  main=paste(envi[i],".Height"))
qqline(level_envi$Height, col = "steelblue", lwd = 2)
}
# Univariate approach to falg out outliers in augmented unreplicated design
outlier.box<- function(data, trait, name){
#test<-subset(data, Envi==envir )# subsset based on environment and replications
#test<-droplevels.data.frame(test) # drop factor levels
#var_name <- eval(substitute(var),eval(data))
trait_name<- eval(substitute(trait),eval(data)) # evaluate trait name
Q3 = quantile(trait_name, 0.75, na.rm = TRUE) # get Q3
Q1=quantile(trait_name, 0.25, na.rm = TRUE)
IQR=IQR(trait_name, na.rm = TRUE)
Maxi<-Q3+1.5*IQR # Maximum Value
Mini<-Q1-1.5*IQR # Minimum Value
#out_flag_max<-ifelse(trait_name >Maxi , "OUTLIER_Max", ".") # Flag lines with maximum value as OUTLIER_Max
#out_flag_min <-ifelse(trait_name < Mini , "OUTLIER_Min", ".")
out_flag<-ifelse(trait_name >Maxi | trait_name < Mini , name, ".") # Flag the outliers
#out<-cbind(out_flag_max,out_flag_min)
out_data<-cbind(data, out_flag) # Combine the orginal data
#outliers<- data[which(out_data$out_flag_max!="." |out_data$out_flag_min!="." ), c(1, 2,4,7,15)] # Extract the ones with extreame values and return only selected columns
#outliers<- data[which(out_data$out_flag!="."),] # Extract the ones with extreame values and return only selected columns
return( out_data)
}
table(demo.data$Environment)
# Now subset the data and use above function to identify the outliers
# subset
Stress.trial<-subset(demo.data, Environment=="Stress.trial") # drought data
Stress.trial<-droplevels.data.frame(Stress.trial) # drop factor levels
# Now subset the non-stress data
str(demo.data)
Non.stress.trial<-subset(demo.data, Environment=="Non.stress.trial")
Non.stress.trial<-droplevels.data.frame(Non.stress.trial) # drop factor levels
# Now identify the outliers for grain yield
Stress.trial<-outlier.box(Stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for non-stress environment
# Now identify the outliers for plant height
Stress.trial<-outlier.box(Stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for non-stress environment
# Now identify the outliers for days to flowering
Stress.trial<-outlier.box(Stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for non-stress environment
# Now merge all the files and save them
demo.data.out<-rbind(Stress.trial, Non.stress.trial)
#Here we will inspect all the outliers and filter the extreame ones.
#First let us change the names of last two columns
colnames(demo.data.out)[c(18,19,20)] <- c("out.flag.GY", "out.flag.PH", "out.flag.FL")
View(demo.data.out)
View(demo.data.out)
# Univariate approach to falg out outliers in augmented unreplicated design
outlier.box<- function(data, trait, name){
#test<-subset(data, Envi==envir )# subsset based on environment and replications
#test<-droplevels.data.frame(test) # drop factor levels
#var_name <- eval(substitute(var),eval(data))
trait_name<- eval(substitute(trait),eval(data)) # evaluate trait name
Q3 = quantile(trait_name, 0.75, na.rm = TRUE) # get Q3
Q1=quantile(trait_name, 0.25, na.rm = TRUE)
IQR=IQR(trait_name, na.rm = TRUE)
Maxi<-Q3+1.5*IQR # Maximum Value
Mini<-Q1-1.5*IQR # Minimum Value
#out_flag_max<-ifelse(trait_name >Maxi , "OUTLIER_Max", ".") # Flag lines with maximum value as OUTLIER_Max
#out_flag_min <-ifelse(trait_name < Mini , "OUTLIER_Min", ".")
out_flag<-ifelse(trait_name >Maxi | trait_name < Mini , name, ".") # Flag the outliers
#out<-cbind(out_flag_max,out_flag_min)
out_data<-cbind(data, out_flag) # Combine the orginal data
#outliers<- data[which(out_data$out_flag_max!="." |out_data$out_flag_min!="." ), c(1, 2,4,7,15)] # Extract the ones with extreame values and return only selected columns
#outliers<- data[which(out_data$out_flag!="."),] # Extract the ones with extreame values and return only selected columns
return( out_data)
}
table(demo.data$Environment)
# Now subset the data and use above function to identify the outliers
# subset
Stress.trial<-subset(demo.data, Environment=="Stress.trial") # drought data
Stress.trial<-droplevels.data.frame(Stress.trial) # drop factor levels
# Now subset the non-stress data
str(demo.data)
Non.stress.trial<-subset(demo.data, Environment=="Non.stress.trial")
Non.stress.trial<-droplevels.data.frame(Non.stress.trial) # drop factor levels
# Now identify the outliers for grain yield
Stress.trial<-outlier.box(Stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for non-stress environment
# Now identify the outliers for plant height
Stress.trial<-outlier.box(Stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for non-stress environment
# Now identify the outliers for days to flowering
Stress.trial<-outlier.box(Stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for non-stress environment
# Now merge all the files and save them
demo.data.out<-rbind(Stress.trial, Non.stress.trial)
#Here we will inspect all the outliers and filter the extreame ones.
#First let us change the names of last two columns
colnames(demo.data.out)[c(14,15,16)] <- c("out.flag.GY", "out.flag.PH", "out.flag.FL")
# Visualize as table
print_table(demo.data.out[, c(1, 7,11,12,13,14,15, 16)], editable = 'cell', rownames = FALSE, caption = htmltools::tags$caption("Table: Showing the details on the outliers",style="color:black; font-size:130%"), filter='top')
# For grain yield
demo.data.out$GYKGPHA <- ifelse(demo.data.out$out.falg.GY==".", demo.data.out$GYKGPHA, NA)
# Univariate approach to falg out outliers in augmented unreplicated design
outlier.box<- function(data, trait, name){
#test<-subset(data, Envi==envir )# subsset based on environment and replications
#test<-droplevels.data.frame(test) # drop factor levels
#var_name <- eval(substitute(var),eval(data))
trait_name<- eval(substitute(trait),eval(data)) # evaluate trait name
Q3 = quantile(trait_name, 0.75, na.rm = TRUE) # get Q3
Q1=quantile(trait_name, 0.25, na.rm = TRUE)
IQR=IQR(trait_name, na.rm = TRUE)
Maxi<-Q3+1.5*IQR # Maximum Value
Mini<-Q1-1.5*IQR # Minimum Value
#out_flag_max<-ifelse(trait_name >Maxi , "OUTLIER_Max", ".") # Flag lines with maximum value as OUTLIER_Max
#out_flag_min <-ifelse(trait_name < Mini , "OUTLIER_Min", ".")
out_flag<-ifelse(trait_name >Maxi | trait_name < Mini , name, ".") # Flag the outliers
#out<-cbind(out_flag_max,out_flag_min)
out_data<-cbind(data, out_flag) # Combine the orginal data
#outliers<- data[which(out_data$out_flag_max!="." |out_data$out_flag_min!="." ), c(1, 2,4,7,15)] # Extract the ones with extreame values and return only selected columns
#outliers<- data[which(out_data$out_flag!="."),] # Extract the ones with extreame values and return only selected columns
return( out_data)
}
table(demo.data$Environment)
# Now subset the data and use above function to identify the outliers
# subset
Stress.trial<-subset(demo.data, Environment=="Stress.trial") # drought data
Stress.trial<-droplevels.data.frame(Stress.trial) # drop factor levels
# Now subset the non-stress data
str(demo.data)
Non.stress.trial<-subset(demo.data, Environment=="Non.stress.trial")
Non.stress.trial<-droplevels.data.frame(Non.stress.trial) # drop factor levels
# Now identify the outliers for grain yield
Stress.trial<-outlier.box(Stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for non-stress environment
# Now identify the outliers for plant height
Stress.trial<-outlier.box(Stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for non-stress environment
# Now identify the outliers for days to flowering
Stress.trial<-outlier.box(Stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for non-stress environment
# Now merge all the files and save them
demo.data.out<-rbind(Stress.trial, Non.stress.trial)
#Here we will inspect all the outliers and filter the extreame ones.
#First let us change the names of last two columns
colnames(demo.data.out)[c(14,15,16)] <- c("out.flag.GY", "out.flag.PH", "out.flag.FL")
# Visualize as table
print_table(demo.data.out[, c(1, 6,11,12,13,14,15, 16)], editable = 'cell', rownames = FALSE, caption = htmltools::tags$caption("Table: Showing the list of outliers for grain yield, flowering date and plant height.",style="color:black; font-size:130%"), filter='top')
# For grain yield
demo.data.out$GYKGPHA <- ifelse(demo.data.out$out.falg.GY==".", demo.data.out$GYKGPHA, NA)
# Remove previous work
rm(list=ls())
# Upload the demo data set
demo.data<-read.csv(file="~/Documents/GitHub/Analysis-pipeline/Data/demo.data.csv",
header = TRUE)
# Convert variables into appropriate data types
demo.data$Genotype<-as.factor(demo.data$Genotype) # genotypes as factor
demo.data$Block<-as.factor(demo.data$Block) # block as factor
demo.data$Row<-as.factor(demo.data$Row) # Row as factor
demo.data$Column<-as.factor(demo.data$Column) # Column as factor
# View as table
print_table <- function(table, ...){
datatable(table, extensions = 'Buttons',
options = list(scrollX = TRUE,
dom = '<<t>Bp>',
buttons = c('copy', 'excel', 'pdf', 'print')), ...)
}
print_table(demo.data[, c(1, 5,6,8,9,13)], editable = 'cell', rownames = FALSE, caption = htmltools::tags$caption("Table: Showing Yield Raw Data for stress and non-stress trials",style="color:black; font-size:130%"), filter = 'top')
# missing data count across all columns
demo.data[demo.data==0]<-NA # Converting any values with Zero into NA
na_count <-data.frame(missing.count=sapply(demo.data, function(y) sum(length(which(is.na(y))))))
#  colSums(is.na(demo.data)) # alternative
na_count$Variables<-row.names(na_count)
# Visualize it as bar plot
ggbarplot(na_count, x = "Variables", y = "missing.count",
fill="lightblue",
color = "lightb lue",            # Set bar border colors to white
x.text.angle = 45           # Rotate vertically x axis texts
)+
labs(title="Missing Data Points for all Variables",x="Variables", y = "Count")+
theme (plot.title = element_text(color="black", size=12,hjust=0.5, face="bold"), # add and modify the title to plot
axis.title.x = element_text(color="black", size=12), # add and modify title to x axis
axis.title.y = element_text(color="black", size=12))
# Let us see which one is missing for Plant Height
demo.data$Height[which(is.na(demo.data$Height))]
# let us see the details on thhis
demo.data[216, ]
# Summary for GRAIN YIELD
summary.gykgpha<-data.frame(demo.data %>%
group_by(Environment)%>%
summarize(Mean = mean(GYKGPHA, na.rm=TRUE),
Median= median(GYKGPHA, na.rm=TRUE),
SD =sd(GYKGPHA, na.rm=TRUE),
Min.=min(GYKGPHA, na.rm=TRUE),
Max.=max(GYKGPHA, na.rm=TRUE),
CV=sd(GYKGPHA, na.rm=TRUE)/mean(GYKGPHA, na.rm=TRUE)*100,
St.err= sd(GYKGPHA, na.rm=TRUE)/sqrt(length(GYKGPHA))
))
summary.gykgpha<-data.frame(lapply(summary.gykgpha, function(y) if(is.numeric(y)) round(y, 2) else y))
summary.gykgpha<-cbind(data.frame(Trait=c(rep("Yield", nrow(summary.gykgpha)))),summary.gykgpha )
# Summary for FLOWERING DATA
summary.flowering<-data.frame(demo.data %>%
group_by(Environment)%>%
summarize(Mean = mean(Days.to.flowering, na.rm=TRUE),
Median= median(Days.to.flowering, na.rm=TRUE),
SD =sd(Days.to.flowering, na.rm=TRUE),
Min.=min(Days.to.flowering, na.rm=TRUE),
Max.=max(Days.to.flowering, na.rm=TRUE),
CV=sd(Days.to.flowering, na.rm=TRUE)/mean(Days.to.flowering, na.rm=TRUE)*100,
St.err= sd(Days.to.flowering, na.rm=TRUE)/sqrt(length(Days.to.flowering))
))
summary.flowering<-data.frame(lapply(summary.flowering, function(y) if(is.numeric(y)) round(y, 2) else y))
summary.flowering<-cbind(data.frame(Trait=c(rep("Flowering", nrow(summary.flowering)))),summary.flowering )
# Summary for PLANT HEIGHT
summary.height<-data.frame(demo.data %>%
group_by(Environment)%>%
summarize(Mean = mean(Height, na.rm=TRUE),
Median= median(Height, na.rm=TRUE),
SD =sd(Height, na.rm=TRUE),
Min.=min(Height, na.rm=TRUE),
Max.=max(Height, na.rm=TRUE),
CV=sd(Height, na.rm=TRUE)/mean(Height, na.rm=TRUE)*100,
St.err= sd(Height, na.rm=TRUE)/sqrt(length(Height))
))
summary.height<-cbind(data.frame(Trait=c(rep("Height", nrow(summary.height)))),summary.height )
# Now combine the all data summeries and view as table
summary.data<-rbind(summary.gykgpha, summary.flowering, summary.height)
summary.data<-data.frame(lapply(summary.data, function(y) if(is.numeric(y)) round(y, 2) else y))
# Add options to print and export
print_table(summary.data, rownames = FALSE,caption = htmltools::tags$caption("Data summary including mean, median, standard deviation (SD), coefficient of variation (CV), and standard error (St.err) for yield, days to flowering and plant Height.", style="color:black; font-size:130%"))
# Univariate approach to falg out outliers in augmented unreplicated design
outlier.box<- function(data, trait, name){
#test<-subset(data, Envi==envir )# subsset based on environment and replications
#test<-droplevels.data.frame(test) # drop factor levels
#var_name <- eval(substitute(var),eval(data))
trait_name<- eval(substitute(trait),eval(data)) # evaluate trait name
Q3 = quantile(trait_name, 0.75, na.rm = TRUE) # get Q3
Q1=quantile(trait_name, 0.25, na.rm = TRUE)
IQR=IQR(trait_name, na.rm = TRUE)
Maxi<-Q3+1.5*IQR # Maximum Value
Mini<-Q1-1.5*IQR # Minimum Value
#out_flag_max<-ifelse(trait_name >Maxi , "OUTLIER_Max", ".") # Flag lines with maximum value as OUTLIER_Max
#out_flag_min <-ifelse(trait_name < Mini , "OUTLIER_Min", ".")
out_flag<-ifelse(trait_name >Maxi | trait_name < Mini , name, ".") # Flag the outliers
#out<-cbind(out_flag_max,out_flag_min)
out_data<-cbind(data, out_flag) # Combine the orginal data
#outliers<- data[which(out_data$out_flag_max!="." |out_data$out_flag_min!="." ), c(1, 2,4,7,15)] # Extract the ones with extreame values and return only selected columns
#outliers<- data[which(out_data$out_flag!="."),] # Extract the ones with extreame values and return only selected columns
return( out_data)
}
table(demo.data$Environment)
# Now subset the data and use above function to identify the outliers
# subset
Stress.trial<-subset(demo.data, Environment=="Stress.trial") # drought data
Stress.trial<-droplevels.data.frame(Stress.trial) # drop factor levels
# Now subset the non-stress data
str(demo.data)
Non.stress.trial<-subset(demo.data, Environment=="Non.stress.trial")
Non.stress.trial<-droplevels.data.frame(Non.stress.trial) # drop factor levels
# Now identify the outliers for grain yield
Stress.trial<-outlier.box(Stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.GY", trait = GYKGPHA) # returns the list that has outliers for non-stress environment
# Now identify the outliers for plant height
Stress.trial<-outlier.box(Stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.PH", trait = Height) # returns the list that has outliers for non-stress environment
# Now identify the outliers for days to flowering
Stress.trial<-outlier.box(Stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for drought environment
Non.stress.trial<-outlier.box(Non.stress.trial,name="Outlier.FL", trait = Days.to.flowering) # returns the list that has outliers for non-stress environment
# Now merge all the files and save them
demo.data.out<-rbind(Stress.trial, Non.stress.trial)
#Here we will inspect all the outliers and filter the extreame ones.
#First let us change the names of last two columns
colnames(demo.data.out)[c(14,15,16)] <- c("out.flag.GY", "out.flag.PH", "out.flag.FL")
# Visualize as table
print_table(demo.data.out[, c(1, 6,11,12,13,14,15, 16)], editable = 'cell', rownames = FALSE, caption = htmltools::tags$caption("Table: Showing the list of outliers for grain yield, flowering date and plant height.",style="color:black; font-size:130%"), filter='top')
View(demo.data.out)
# For grain yield
demo.data.out$GYKGPHA <- ifelse(demo.data.out$out.falg.GY==".", demo.data.out$GYKGPHA, NA)
# For grain yield
demo.data.out$GYKGPHA<- ifelse(demo.data.out$out.flag.GY==".", demo.data.out$GYKGPHA, NA)
# For plant height
demo.data.out$Height<- ifelse(demo.data.out$out.flag.PH==".", demo.data.out$Height, NA)
# For plant height
demo.data.out$Days.to.flowering<- ifelse(demo.data.out$out.flag.FL==".", demo.data.out$Days.to.flowering, NA)
View(demo.data.out)
# Now draw the box plot
p1<-boxplot.yield<-myboxplot(demo.data.out,x=Environment,y=GYKGPHA)+
labs(title="",x="Environments", y = "Grain Yield")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 10000)
# First let us visualize the data using boxplots
myboxplot<- function(dataframe,x,y){
aaa <- enquo(x)
bbb <- enquo(y)
dfname <- enquo(dataframe)
dataframe %>%
filter(!is.na(!! aaa), !is.na(!! bbb))  %>%
#group_by(!! aaa,!! bbb) %>%
#count() %>%
ggplot(aes_(fill=aaa, x=aaa, y=bbb))+
theme_classic()+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +# fill by timepoint to give different color
#scale_fill_manual(values = c("", ""))+
#scale_color_manual(values = c("", ""))
theme (plot.title = element_text(color="black", size=12,hjust=0.5, face = "bold"), # add and modify the title to plot
axis.title.x = element_text(color="black", size=12, face = "bold"), # add and modify title to x axis
axis.title.y = element_text(color="black", size=12, face="bold")) + # add and modify title to y axis
#scale_y_continuous(limits=c(0,15000), breaks=seq(0,15000,1000), expand = c(0, 0))+
theme(axis.text= element_text(color = "black", size = 10))+ # modify the axis text
theme(legend.title = element_text(colour="black", size=16), legend.position = "none",
legend.text = element_text(colour="black", size=14))+ # add and modify the legends
guides(fill=guide_legend(title="Environments"))+
stat_summary(fun.y=mean, geom="line", aes(group=1))  +
stat_summary(fun=mean, geom="point")
}
# Now draw the box plot for yield
p1<-boxplot.yield<-myboxplot(demo.data,x=Environment,y=GYKGPHA)+
labs(title="",x="Environments", y = "Grain Yield")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 10000)
#p1<-ggplotly(boxplot.yield)
# Now draw the box plot for flowering
p2<-boxplot.flowering<-myboxplot(demo.data,x=Environment,y=Days.to.flowering)+
labs(title="",x="Environments", y = "Days to flowering")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 130)
#p2<-ggplotly(boxplot.flowering)
# Now draw the box plot height
p3<-boxplot.height<-myboxplot(demo.data,x=Environment,y=Height)+
labs(title="",x="Environments", y = "Plant Height (cm)")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 167)
#p3<-ggplotly(boxplot.height)
p1+p2+p3
# Now draw the box plot
p1<-boxplot.yield<-myboxplot(demo.data.out,x=Environment,y=GYKGPHA)+
labs(title="",x="Environments", y = "Grain Yield")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 10000)
#p1<-ggplotly(boxplot.yield)
# Now draw the box plot for flowering
p2<-boxplot.flowering<-myboxplot(demo.data.out,x=Environment,y=Days.to.flowering)+
labs(title="",x="Environments", y = "Days to flowering")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 130)
#p2<-ggplotly(boxplot.flowering)
# Now draw the box plot height
p3<-boxplot.height<-myboxplot(demo.data.out,x=Environment,y=Height)+
labs(title="",x="Environments", y = "Plant Height (cm)")+
stat_compare_means(method = "anova", label.x = 1.6, label.y = 167)
#p3<-ggplotly(boxplot.height)
par(mfrow=c(1,3))
p1<-ggplotly(p1)
p2<-ggplotly(p2)
p3<-ggplotly(p3)
subplot(p1, p2, p3, nrows=1, margin = 0.05, titleY = TRUE)
summary.gykgpha<-data.frame(demo.data.out %>%
group_by(Environment)%>%
summarize(Mean = mean(GYKGPHA, na.rm=TRUE),
Median= median(GYKGPHA, na.rm=TRUE),
SD =sd(GYKGPHA, na.rm=TRUE),
Min.=min(GYKGPHA, na.rm=TRUE),
Max.=max(GYKGPHA, na.rm=TRUE),
CV=sd(GYKGPHA, na.rm=TRUE)/mean(GYKGPHA, na.rm=TRUE)*100,
St.err= sd(GYKGPHA, na.rm=TRUE)/sqrt(length(GYKGPHA))
))
summary.gykgpha<-data.frame(lapply(summary.gykgpha, function(y) if(is.numeric(y)) round(y, 2) else y))
summary.gykgpha<-cbind(data.frame(Trait=c(rep("Yield", nrow(summary.gykgpha)))),summary.gykgpha )
# Summary for the flowering data
summary.flowering<-data.frame(demo.data.out %>%
group_by(Environment)%>%
summarize(Mean = mean(Days.to.flowering, na.rm=TRUE),
Median= median(Days.to.flowering, na.rm=TRUE),
SD =sd(Days.to.flowering, na.rm=TRUE),
Min.=min(Days.to.flowering, na.rm=TRUE),
Max.=max(Days.to.flowering, na.rm=TRUE),
CV=sd(Days.to.flowering, na.rm=TRUE)/mean(Days.to.flowering, na.rm=TRUE)*100,
St.err= sd(Days.to.flowering, na.rm=TRUE)/sqrt(length(Days.to.flowering))
))
summary.flowering<-data.frame(lapply(summary.flowering, function(y) if(is.numeric(y)) round(y, 2) else y))
summary.flowering<-cbind(data.frame(Trait=c(rep("Flowering", nrow(summary.flowering)))),summary.flowering )
# Summary for plant height
summary.height<-data.frame(demo.data.out %>%
group_by(Environment)%>%
summarize(Mean = mean(Height, na.rm=TRUE),
Median= median(Height, na.rm=TRUE),
SD =sd(Height, na.rm=TRUE),
Min.=min(Height, na.rm=TRUE),
Max.=max(Height, na.rm=TRUE),
CV=sd(Height, na.rm=TRUE)/mean(Height, na.rm=TRUE)*100,
St.err= sd(Height, na.rm=TRUE)/sqrt(length(Height))
))
summary.height<-data.frame(lapply(summary.height, function(y) if(is.numeric(y)) round(y, 2) else y))
summary.height<-cbind(data.frame(Trait=c(rep("Height", nrow(summary.height)))),summary.height )
# Now combine the all data summeries and view as table
summary.data<-rbind(summary.gykgpha, summary.flowering, summary.height)
datatable(summary.data,options = list(pageLength = 7, dom = 'tip'), rownames = FALSE,caption = htmltools::tags$caption("Data summary including mean, median, standard deviation (SD), Coefficient of variation (CV), and Standard error (St.err) for yield, flowering and height", style="color:black; font-size:130%"))
# Save the file for analysis
write.csv(demo.data.out, file = "~/Documents/manuscript/outputs/tables/demo.data.filtered.csv", row.names = FALSE)
setwd("~/Documents/GitHub/Analysis-pipeline/Outputs/Tables")
